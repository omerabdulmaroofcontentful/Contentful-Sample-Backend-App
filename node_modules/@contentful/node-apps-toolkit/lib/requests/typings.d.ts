import * as runtypes from 'runtypes';
export declare enum ContentfulHeader {
    Timestamp = "x-contentful-timestamp",
    SignedHeaders = "x-contentful-signed-headers",
    Signature = "x-contentful-signature"
}
export declare const CanonicalRequestValidator: runtypes.Intersect2<runtypes.Record<{
    method: runtypes.Union7<runtypes.Literal<"GET">, runtypes.Literal<"PATCH">, runtypes.Literal<"HEAD">, runtypes.Literal<"POST">, runtypes.Literal<"DELETE">, runtypes.Literal<"OPTIONS">, runtypes.Literal<"PUT">>;
    path: runtypes.Constraint<runtypes.String, string, unknown>;
}, false>, runtypes.Partial<{
    headers: runtypes.StringDictionary<runtypes.String>;
    body: runtypes.String;
}, false>>;
export declare type CanonicalRequest = runtypes.Static<typeof CanonicalRequestValidator>;
export declare const SecretValidator: runtypes.Constraint<runtypes.String, string, unknown>;
export declare type Secret = runtypes.Static<typeof SecretValidator>;
export declare const TimestampValidator: runtypes.Constraint<runtypes.Number, number, unknown>;
export declare type Timestamp = runtypes.Static<typeof TimestampValidator>;
export declare const RequestMetadataValidator: runtypes.Record<{
    signature: runtypes.Constraint<runtypes.String, string, unknown>;
    timestamp: runtypes.Constraint<runtypes.Number, number, unknown>;
    signedHeaders: runtypes.Constraint<runtypes.Array<runtypes.String, false>, string[], unknown>;
}, false>;
export declare type RequestMetadata = runtypes.Static<typeof RequestMetadataValidator>;
export declare const TimeToLiveValidator: runtypes.Constraint<runtypes.Number, number, unknown>;
export declare type TimeToLive = runtypes.Static<typeof TimeToLiveValidator>;
export declare type NormalizedCanonicalRequest = {
    method: CanonicalRequest['method'];
    path: CanonicalRequest['path'];
    headers: [key: string, value: string][];
    body: CanonicalRequest['body'];
};
export declare type SignedRequestHeaders = {
    [key in ContentfulHeader]: string;
};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyRequest = void 0;
const typings_1 = require("./typings");
const utils_1 = require("./utils");
const sign_request_1 = require("./sign-request");
const exceptions_1 = require("./exceptions");
const getRequestMetadata = (normalizedHeaders) => {
    var _a, _b;
    const signature = normalizedHeaders[typings_1.ContentfulHeader.Signature];
    const signedHeaders = ((_a = normalizedHeaders[typings_1.ContentfulHeader.SignedHeaders]) !== null && _a !== void 0 ? _a : '').split(',');
    const timestamp = Number.parseInt((_b = normalizedHeaders[typings_1.ContentfulHeader.Timestamp]) !== null && _b !== void 0 ? _b : '', 10);
    return typings_1.RequestMetadataValidator.check({ signature, signedHeaders, timestamp });
};
const isRequestTimestampTooOld = (ttl, timestamp) => {
    return Date.now() - timestamp >= ttl * 1000;
};
/**
 * Given a secret verifies a CanonicalRequest. Throws when signature is older than `rawTimeToLive` seconds.
 * Pass `rawTimeToLive = 0` to disable TTL checks.
 *
 * ~~~
 * const { verifyRequest } = require('@contentful/node-apps-toolkit')
 * const { server } = require('./imaginary-server')
 * const { makeCanonicalRequestFromImaginaryServerRequest } = require('./imaginary-utils')
 *
 * const SECRET = process.env.SECRET
 * const REQUEST_TTL = Number.parseInt(process.env.REQUEST_TTL, 10)
 *
 * server.post('/api/my-resources', (req, res) => {
 *   const canonicalRequest = makeCanonicalRequestFromImaginaryServerRequest(req)
 *
 *   try {
 *     const isVerifiedRequest = verifyRequest(SECRET, canonicalRequest, REQUEST_TTL)
 *
 *     if (!isVerifiedRequest) {
 *       res.send(403, 'Invalid signature')
 *     }
 *   } catch (_error) {
 *     res.send(422, 'Unable to verify request')
 *   }
 *
 *   // Rest of the code
 * })
 *
 * ~~~
 * @category Requests
 */
exports.verifyRequest = (rawSecret, rawCanonicalRequest, rawTimeToLive = 30) => {
    var _a;
    const canonicalRequest = typings_1.CanonicalRequestValidator.check(rawCanonicalRequest);
    const secret = typings_1.SecretValidator.check(rawSecret);
    const normalizedHeaders = utils_1.normalizeHeaders((_a = canonicalRequest.headers) !== null && _a !== void 0 ? _a : {});
    const { signature, signedHeaders, timestamp } = getRequestMetadata(normalizedHeaders);
    if (rawTimeToLive !== 0 && isRequestTimestampTooOld(rawTimeToLive, timestamp)) {
        throw new exceptions_1.ExpiredRequestException(rawTimeToLive);
    }
    const requestToValidate = {
        ...canonicalRequest,
        headers: utils_1.pickHeaders(normalizedHeaders, signedHeaders),
    };
    const { [typings_1.ContentfulHeader.Signature]: computedSignature } = sign_request_1.signRequest(secret, requestToValidate, timestamp);
    return signature === computedSignature;
};
//# sourceMappingURL=verify-request.js.map
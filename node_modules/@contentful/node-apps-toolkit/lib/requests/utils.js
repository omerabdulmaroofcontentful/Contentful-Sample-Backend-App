"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.map = exports.filter = exports.pickHeaders = exports.normalizeHeaders = exports.sortHeaderKeys = exports.getNormalizedEncodedURI = void 0;
const querystring = require("querystring");
exports.getNormalizedEncodedURI = (uri) => {
    const [pathname, search] = uri.split('?');
    const escapedSearch = search ? querystring.escape(search) : '';
    return encodeURI(escapedSearch ? `${pathname}?${escapedSearch}` : pathname);
};
exports.sortHeaderKeys = (keyA, keyB) => (keyA > keyB ? 1 : -1);
const normalizeHeaderKey = (key) => key.toLowerCase().trim();
const normalizeHeaderValue = (value) => value.trim();
exports.normalizeHeaders = (headers) => exports.map(headers, ([key, value]) => [normalizeHeaderKey(key), normalizeHeaderValue(value)]);
exports.pickHeaders = (headers, keys) => {
    if (!headers) {
        return {};
    }
    if (!keys) {
        return headers;
    }
    return exports.filter(headers, ([key]) => keys.includes(key));
};
// Remove when this eslint rule covers all the cases
// https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/ROADMAP.md
/*eslint-disable no-unused-vars*/
exports.filter = (obj, callback) => {
    return Object.fromEntries(Object.entries(obj).filter(callback));
};
exports.map = (obj, callback) => {
    return Object.fromEntries(Object.entries(obj).map(callback));
};
/*eslint-enable no-unused-vars*/
//# sourceMappingURL=utils.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeToLiveValidator = exports.RequestMetadataValidator = exports.TimestampValidator = exports.SecretValidator = exports.CanonicalRequestValidator = exports.ContentfulHeader = void 0;
// Remove when this eslint rule covers all the cases
// https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/ROADMAP.md
/*eslint-disable no-unused-vars*/
const runtypes = require("runtypes");
var ContentfulHeader;
(function (ContentfulHeader) {
    ContentfulHeader["Timestamp"] = "x-contentful-timestamp";
    ContentfulHeader["SignedHeaders"] = "x-contentful-signed-headers";
    ContentfulHeader["Signature"] = "x-contentful-signature";
})(ContentfulHeader = exports.ContentfulHeader || (exports.ContentfulHeader = {}));
const MethodValidator = runtypes.Union(runtypes.Literal('GET'), runtypes.Literal('PATCH'), runtypes.Literal('HEAD'), runtypes.Literal('POST'), runtypes.Literal('DELETE'), runtypes.Literal('OPTIONS'), runtypes.Literal('PUT'));
const PathValidator = runtypes.String.withConstraint((s) => s.startsWith('/'), {
    name: 'CanonicalURI',
});
const SignatureValidator = runtypes.String.withConstraint((s) => s.length === 64, {
    name: 'SignatureLength',
});
exports.CanonicalRequestValidator = runtypes
    .Record({
    method: MethodValidator,
    path: PathValidator,
})
    .And(runtypes.Partial({
    headers: runtypes.Dictionary(runtypes.String, 'string'),
    body: runtypes.String,
}));
exports.SecretValidator = runtypes.String.withConstraint((s) => s.length === 64, {
    name: 'SecretLength',
});
// Only dates after 01-01-2020
exports.TimestampValidator = runtypes.Number.withConstraint((n) => n > 1577836800000, {
    name: 'TimestampAge',
});
const SignedHeadersValidator = runtypes
    .Array(runtypes.String)
    .withConstraint((l) => l.length >= 2, { name: 'MissingTimestampOrSignedHeaders' });
exports.RequestMetadataValidator = runtypes.Record({
    signature: SignatureValidator,
    timestamp: exports.TimestampValidator,
    signedHeaders: SignedHeadersValidator,
});
exports.TimeToLiveValidator = runtypes.Number.withConstraint((n) => n >= 0, {
    name: 'PositiveNumber',
});
//# sourceMappingURL=typings.js.map
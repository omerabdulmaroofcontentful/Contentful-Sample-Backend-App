import { CanonicalRequest, Secret, TimeToLive } from './typings';
/**
 * Given a secret verifies a CanonicalRequest. Throws when signature is older than `rawTimeToLive` seconds.
 * Pass `rawTimeToLive = 0` to disable TTL checks.
 *
 * ~~~
 * const { verifyRequest } = require('@contentful/node-apps-toolkit')
 * const { server } = require('./imaginary-server')
 * const { makeCanonicalRequestFromImaginaryServerRequest } = require('./imaginary-utils')
 *
 * const SECRET = process.env.SECRET
 * const REQUEST_TTL = Number.parseInt(process.env.REQUEST_TTL, 10)
 *
 * server.post('/api/my-resources', (req, res) => {
 *   const canonicalRequest = makeCanonicalRequestFromImaginaryServerRequest(req)
 *
 *   try {
 *     const isVerifiedRequest = verifyRequest(SECRET, canonicalRequest, REQUEST_TTL)
 *
 *     if (!isVerifiedRequest) {
 *       res.send(403, 'Invalid signature')
 *     }
 *   } catch (_error) {
 *     res.send(422, 'Unable to verify request')
 *   }
 *
 *   // Rest of the code
 * })
 *
 * ~~~
 * @category Requests
 */
export declare const verifyRequest: (rawSecret: Secret, rawCanonicalRequest: CanonicalRequest, rawTimeToLive?: TimeToLive) => boolean;
